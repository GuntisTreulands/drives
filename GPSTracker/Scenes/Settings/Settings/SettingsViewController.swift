//
//  SettingsViewController.swift
//  GPS Tracker
//
//  Created by Guntis on 2022.
//  Copyright (c) 2022 . All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SettingsDisplayLogic: AnyObject {
  	func displaySettingsList(viewModel: Settings.SettingsList.ViewModel)
}

class SettingsViewController: UIViewController, SettingsDisplayLogic, SettingsViewLayoutViewLogic {

  	var interactor: SettingsBusinessLogic?
  	var router: (NSObjectProtocol & SettingsRoutingLogic & SettingsDataPassing)?
  	var layoutView: SettingsViewLayoutView!
  	var data = [Settings.SettingsList.ViewModel.DisplayedSettingsCell]()

  	// MARK: Object lifecycle

	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    	super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    	setup()
  	}

  	required init?(coder aDecoder: NSCoder) {
    	super.init(coder: aDecoder)
    	setup()
  	}

  	// MARK: View lifecycle

	deinit {
    	NotificationCenter.default.removeObserver(self, name: .applicationDidBecomeActiveFromAppSettings, object: nil)
    	NotificationCenter.default.removeObserver(self, name: .languageWasChanged, object: nil)
    	NotificationCenter.default.removeObserver(self, name: .fontSizeWasChanged, object: nil)
	}

  	override func viewDidLoad() {
    	super.viewDidLoad()
    	self.title = "settings_title".localized()
    	self.view.backgroundColor = .white
    	setUpView()


		self.navigationController!.interactivePopGestureRecognizer?.delegate = nil
		self.navigationController!.interactivePopGestureRecognizer?.isEnabled = true
		
    	self.navigationController!.setNavigationBarHidden(false, animated: true)

    	NotificationCenter.default.addObserver(self, selector: #selector(applicationDidBecomeActive),
    		name: .applicationDidBecomeActiveFromAppSettings, object: nil)
    	NotificationCenter.default.addObserver(self, selector: #selector(languageWasChanged),
    		name: .languageWasChanged, object: nil)
    	NotificationCenter.default.addObserver(self, selector: #selector(fontSizeWasChanged),
    		name: .fontSizeWasChanged, object: nil)
  	}

	override func viewWillAppear(_ animated: Bool) {
		super.viewWillAppear(animated)
		getSettingsCellsData()
	}

	override func viewDidAppear(_ animated: Bool) {
		super.viewDidAppear(animated)
		layoutView.dismissAnyActiveCell()
	}

	// MARK: Set up

	private func setup() {
		let viewController = self
		let interactor = SettingsInteractor()
		let presenter = SettingsPresenter()
		let router = SettingsRouter()
		viewController.interactor = interactor
		viewController.router = router
		interactor.presenter = presenter
		presenter.viewController = viewController
		presenter.router = router
		router.viewController = viewController
		router.dataStore = interactor
  	}

	private func setUpView() {
		layoutView = SettingsViewLayoutView(frame: CGRect(x: 0, y: 0, width: self.view.frame.width, height: 100))
		self.view.addSubview(layoutView)
		layoutView.topAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.topAnchor).isActive = true
        layoutView.leftAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.leftAnchor).isActive = true
        layoutView.rightAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.rightAnchor).isActive = true
        layoutView.bottomAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.bottomAnchor).isActive = true
		layoutView.controller = self
	}

	// MARK: ExtendedSettingsCellSwitchLogic

	func userPressedOnCellType(cellType: Settings.SettingsListCellType) {
		switch cellType {
			case .appLanguageCell:
				router?.routeToLanguageChooseScene()
			case .notifsEndDriveCell:
				interactor?.userPressedOnNotifEndDriveSwitch()
			case .notifsWarningCell:
				interactor?.userPressedOnNotifWarningSwitch()
			case .gpsAccessCell:
				interactor?.userPressedOnGpsSwitch()
			case .motionAccessCell:
				interactor?.userPressedOnMotionSwitch()
			case .exportDataCell:
				router?.exportToMailForm()
			case .feedbackCell:
				router?.presentMailForm()
			case .appVersionCell:
				break
		}

		switch cellType {
			case .appLanguageCell:
				break
			default:
				DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) { [weak self] in
					self?.layoutView.dismissAnyActiveCell()
				}
				break
		}
	}



  	// MARK: Functions

  	private func getSettingsCellsData() {
    	let request = Settings.SettingsList.Request()
    	interactor?.getSettingsCellsData(request: request)
  	}

	// MARK: SettingsDisplayLogic

  	func displaySettingsList(viewModel: Settings.SettingsList.ViewModel) {
  		layoutView.updateData(data: viewModel.displayedSettingsCells)
  	}

  	// MARK: PushNotifReturnUpdateDataLogic

	func updateData() {
		getSettingsCellsData()
	}

	// MARK: Notifications

  	@objc private func applicationDidBecomeActive() {
		getSettingsCellsData()
	}

	@objc private func languageWasChanged() {
		self.title = "settings_title".localized()
	}

	@objc private func fontSizeWasChanged() {
		getSettingsCellsData()
	}
}
