//
//  AppLanguageViewController.swift
//  GPS Tracker
//
//  Created by Guntis on 2022.
//  Copyright (c) 2022 . All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AppLanguageDisplayLogic: AnyObject {
  	func presentLanguageList(viewModel: AppLanguage.GetLanguage.ViewModel)
}

class AppLanguageViewController: UIViewController, AppLanguageDisplayLogic, AppLanguageLayoutViewLogic {
  	var interactor: AppLanguageBusinessLogic?
  	var router: (NSObjectProtocol & AppLanguageRoutingLogic & AppLanguageDataPassing)?
	var layoutView: AppLanguageLayoutView!

  	// MARK: Object lifecycle

  	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    	super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    	setup()
  	}

  	required init?(coder aDecoder: NSCoder) {
    	super.init(coder: aDecoder)
    	setup()
  	}

  	// MARK: View lifecycle

  	override func viewDidLoad() {
    	super.viewDidLoad()
    	self.title = "settings_app_language_title".localized()
    	self.view.backgroundColor = .white
		setUpView()
    	getLanaguageListData()
  	}

	override func viewDidAppear(_ animated: Bool) {
		super.viewDidAppear(animated)
	}
	
	// MARK: Set up

	private func setup() {
		let viewController = self
		let interactor = AppLanguageInteractor()
		let presenter = AppLanguagePresenter()
		let router = AppLanguageRouter()
		viewController.interactor = interactor
		viewController.router = router
		interactor.presenter = presenter
		presenter.viewController = viewController
		router.viewController = viewController
		router.dataStore = interactor
  	}

	private func setUpView() {
		layoutView = AppLanguageLayoutView(frame: CGRect(x: 0, y: 0, width: self.view.frame.width, height: 100))
		layoutView.controller = self
		self.view.addSubview(layoutView)
		layoutView.topAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.topAnchor).isActive = true
        layoutView.leftAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.leftAnchor).isActive = true
        layoutView.rightAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.rightAnchor).isActive = true
        layoutView.bottomAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.bottomAnchor).isActive = true
	}

  	// MARK: Functions

  	private func getLanaguageListData() {
    	let request = AppLanguage.GetLanguage.Request()
    	interactor?.getLanaguageListData(request: request)
  	}

	// MARK: AppLanguageDisplayLogic

  	func presentLanguageList(viewModel: AppLanguage.GetLanguage.ViewModel) {
  		layoutView.updateData(data: viewModel.displayedLanguageCellItems)
  		self.title = "settings_app_language_title".localized()
  	}

  	// MARK: AppLanguageLayoutViewLogic

	func userSelectedCell(withCellDataItem item: AppLanguage.GetLanguage.ViewModel.DisplayedLanguageCellItem) {
		let request = AppLanguage.ChangeLanguage.Request(selectedLanguage: item.language)
		interactor?.userSelectedLanguage(request: request)
	}
}
