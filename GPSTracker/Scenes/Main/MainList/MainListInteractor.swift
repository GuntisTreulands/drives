//
//  MainListInteractor.swift
//  GPS Tracker
//
//  Created by Guntis on 2022.
//  Copyright (c) 2022 . All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData

protocol MainListBusinessLogic {
	func fetchDrives(request: MainList.FetchDrives.Request)
	func deleteADrive(request: MainList.DeleteADrive.Request)
	func changeADriveType(request: MainList.ChangeADriveType.Request)
	func fetchStats(request: MainList.FetchStats.Request)
}

protocol MainListDataStore {

}

class MainListInteractor: NSObject, MainListBusinessLogic, MainListDataStore, NSFetchedResultsControllerDelegate {
	
	var presenter: MainListPresentationLogic?
	var fetchedResultsController: NSFetchedResultsController<DriveEntity>!

	var statsShowType: MainList.StatsShowType!

	// MARK: MainListBusinessLogic

	func fetchDrives(request: MainList.FetchDrives.Request) {
		if fetchedResultsController == nil {

			let context = DataBaseManager.shared.mainManagedObjectContext()
			let fetchRequest: NSFetchRequest<DriveEntity> = DriveEntity.fetchRequest()
			let sortByMonth = NSSortDescriptor(key: "sectionedMonthString", ascending: false)
			let sortByDay = NSSortDescriptor(key: "sortingMonthDayYearString", ascending: false)
			let sortByStartTime = NSSortDescriptor(key: "startTime", ascending: true)
			fetchRequest.sortDescriptors = [sortByMonth, sortByDay, sortByStartTime]

			fetchedResultsController = NSFetchedResultsController(fetchRequest: fetchRequest, managedObjectContext: context, sectionNameKeyPath: "sectionedMonthString", cacheName: nil)

			fetchedResultsController.delegate = self
		}

		var fetchedDrives = [[DriveEntity]]()

		do {
			try fetchedResultsController.performFetch()

			for section in fetchedResultsController.sections! {

				if let correctObjects = section.objects {
//					try! DataBaseManager.shared.mainManagedObjectContext().obtainPermanentIDs(for: (correctObjects as? [DriveEntity])!)
					fetchedDrives.append((correctObjects as? [DriveEntity])!)
				}
			}

		} catch let error {
			// Something went wrong
			print("Something went wrong. \(error)")
		}


    	let response = MainList.FetchDrives.Response(fetchedDrives: fetchedDrives)
    	presenter?.presentList(response: response)
	}

	func deleteADrive(request: MainList.DeleteADrive.Request) {
		let task = {

			let fetchRequest: NSFetchRequest<DriveEntity> = DriveEntity.fetchRequest()
			fetchRequest.predicate = NSPredicate(format:"identificator == %@", request.identificator)
			fetchRequest.fetchLimit = 1
			
			var drives = [DriveEntity]()

			do {
				drives = try DataBaseManager.shared.mainManagedObjectContext().fetch(fetchRequest)
			} catch { }

			for drive in drives {
				DataBaseManager.shared.mainManagedObjectContext().delete(drive)
			}

			DataBaseManager.shared.saveContext()
		}

		DataBaseManager.shared.addATask(action: task)
	}

	func changeADriveType(request: MainList.ChangeADriveType.Request) {
		let task = {

			let fetchRequest: NSFetchRequest<DriveEntity> = DriveEntity.fetchRequest()
			fetchRequest.predicate = NSPredicate(format:"identificator == %@", request.identificator)
			fetchRequest.fetchLimit = 1

			var drives = [DriveEntity]()

			do {
				drives = try DataBaseManager.shared.mainManagedObjectContext().fetch(fetchRequest)
			} catch { }

			for drive in drives {
				if drive.isBusinessDrive != request.isBusinessType {
					drive.isBusinessDrive = request.isBusinessType
				}
			}

			DataBaseManager.shared.saveContext()
		}

		DataBaseManager.shared.addATask(action: task)
	}


	func fetchStats(request: MainList.FetchStats.Request) {
		self.statsShowType = request.statsShowType
		let task = {

			let context = DataBaseManager.shared.mainManagedObjectContext()
			let fetchRequestCarCosts: NSFetchRequest<CarCostsEntity> = CarCostsEntity.fetchRequest()
			fetchRequestCarCosts.sortDescriptors = [NSSortDescriptor.init(key: "sortId", ascending: true)]
			var carCostsItems = [CarCostsEntity]()
			do { carCostsItems = try context.fetch(fetchRequestCarCosts) } catch { }

			let fetchRequestValueDrop: NSFetchRequest<ValueDropEntity> = ValueDropEntity.fetchRequest()
			fetchRequestValueDrop.sortDescriptors = [NSSortDescriptor.init(key: "sortId", ascending: true)]
			var valueDropItems = [ValueDropEntity]()
			do { valueDropItems = try context.fetch(fetchRequestValueDrop) } catch { }

			let carCosts: [Double] = carCostsItems.map({$0.value})
			let valueDrop: [Double] = valueDropItems.map({$0.value})


			let date = Calendar.current.date(byAdding: .year, value: -1, to: Date())

			let fetchRequest: NSFetchRequest<DriveEntity> = DriveEntity.fetchRequest()
			let sortByStartTime = NSSortDescriptor(key: "startTime", ascending: true)
			fetchRequest.sortDescriptors = [sortByStartTime]
			fetchRequest.predicate = NSPredicate(format:"startTime >= %f && isBusinessDrive == true && isInProgress == false", date!.timeIntervalSince1970)


			let fetchRequest2: NSFetchRequest<DriveEntity> = DriveEntity.fetchRequest()

			let sortByDay2 = NSSortDescriptor(key: "sortingYearMonthDayString", ascending: true)
			let sortByStartTime2 = NSSortDescriptor(key: "startTime", ascending: true)
			fetchRequest2.sortDescriptors = [sortByDay2, sortByStartTime2]
			fetchRequest2.predicate = NSPredicate(format:"startTime >= %f && isBusinessDrive == true && isInProgress == false", date!.timeIntervalSince1970)

			var fetchedResultsController: NSFetchedResultsController<DriveEntity>!

			fetchedResultsController = NSFetchedResultsController(fetchRequest: fetchRequest2, managedObjectContext: DataBaseManager.shared.mainManagedObjectContext(), sectionNameKeyPath: "sortingYearMonthDayString", cacheName: nil)

			var drives = [DriveEntity]()
			var sectionedDrives = [[DriveEntity]]()
			
			do {
				try fetchedResultsController.performFetch()

				for section in fetchedResultsController.sections! {

					if let correctObjects = section.objects {
						sectionedDrives.append((correctObjects as? [DriveEntity])!)
					}
				}

				drives = try DataBaseManager.shared.mainManagedObjectContext().fetch(fetchRequest)
			} catch { }

			let response = MainList.FetchStats.Response(fetchedDrives: drives, fetchedSectionedDrives: sectionedDrives, statsShowType: self.statsShowType, carCosts: carCosts, valueDrop: valueDrop)
			self.presenter?.loadStats(response: response)
		}

		DataBaseManager.shared.addATask(action: task)
	}

	// MARK: NSFetchedResultsControllerDelegate
	
  	func controllerDidChangeContent(_ controller: NSFetchedResultsController<NSFetchRequestResult>) {
		fetchDrives(request: MainList.FetchDrives.Request())


		let requestStats = MainList.FetchStats.Request(statsShowType: self.statsShowType)
		fetchStats(request: requestStats)
	}
}
