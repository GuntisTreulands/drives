//
//  MainListInteractor.swift
//  GPS Tracker
//
//  Created by Guntis on 2022.
//  Copyright (c) 2022 . All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData

protocol MainListBusinessLogic {
	func fetchDrives(request: MainList.FetchDrives.Request)
	func deleteADrive(request: MainList.DeleteADrive.Request)
	func changeADriveType(request: MainList.ChangeADriveType.Request)
}

protocol MainListDataStore {

}

class MainListInteractor: NSObject, MainListBusinessLogic, MainListDataStore, NSFetchedResultsControllerDelegate {
	
	var presenter: MainListPresentationLogic?
	var fetchedResultsController: NSFetchedResultsController<DriveEntity>!

	// MARK: MainListBusinessLogic

	func fetchDrives(request: MainList.FetchDrives.Request) {
		if fetchedResultsController == nil {
			let context = DataBaseManager.shared.mainManagedObjectContext()
			let fetchRequest: NSFetchRequest<DriveEntity> = DriveEntity.fetchRequest()
			let sortByMonth = NSSortDescriptor(key: "sectionedMonthString", ascending: false)
			let sortByDay = NSSortDescriptor(key: "sortingMonthDayYearString", ascending: false)
			let sortByStartTime = NSSortDescriptor(key: "startTime", ascending: true)
			fetchRequest.sortDescriptors = [sortByMonth, sortByDay, sortByStartTime]

			fetchedResultsController = NSFetchedResultsController(fetchRequest: fetchRequest, managedObjectContext: context, sectionNameKeyPath: "sectionedMonthString", cacheName: nil)

			fetchedResultsController.delegate = self
		}

		var fetchedDrives = [[DriveEntity]]()

		do {
			try fetchedResultsController.performFetch()

			for section in fetchedResultsController.sections! {

				if let correctObjects = section.objects {
					fetchedDrives.append((correctObjects as? [DriveEntity])!)
				}
			}

		} catch let error {
			// Something went wrong
			print("Something went wrong. \(error)")
		}


    	let response = MainList.FetchDrives.Response(fetchedDrives: fetchedDrives)
    	presenter?.presentList(response: response)
	}

	func deleteADrive(request: MainList.DeleteADrive.Request) {
		let task = {

			let fetchRequest: NSFetchRequest<DriveEntity> = DriveEntity.fetchRequest()
			fetchRequest.predicate = NSPredicate(format:"identificator == %@", request.identificator)
			fetchRequest.fetchLimit = 1
			
			var drives = [DriveEntity]()

			do {
				drives = try DataBaseManager.shared.mainManagedObjectContext().fetch(fetchRequest)
			} catch { }

			for drive in drives {
				DataBaseManager.shared.mainManagedObjectContext().delete(drive)
			}

			DataBaseManager.shared.saveContext()
		}

		DataBaseManager.shared.addATask(action: task)
	}

	func changeADriveType(request: MainList.ChangeADriveType.Request) {
		let task = {

			let fetchRequest: NSFetchRequest<DriveEntity> = DriveEntity.fetchRequest()
			fetchRequest.predicate = NSPredicate(format:"identificator == %@", request.identificator)
			fetchRequest.fetchLimit = 1

			var drives = [DriveEntity]()

			do {
				drives = try DataBaseManager.shared.mainManagedObjectContext().fetch(fetchRequest)
			} catch { }

			for drive in drives {
				if drive.isBusinessDrive != request.isBusinessType {
					drive.isBusinessDrive = request.isBusinessType
				}
			}

			DataBaseManager.shared.saveContext()
		}

		DataBaseManager.shared.addATask(action: task)
	}


	// MARK: NSFetchedResultsControllerDelegate
	
  	func controllerDidChangeContent(_ controller: NSFetchedResultsController<NSFetchRequestResult>) {
		fetchDrives(request: MainList.FetchDrives.Request())
	}
}
