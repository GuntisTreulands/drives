//
//  MainListViewController.swift
//  GPS Tracker
//
//  Created by Guntis on 2022.
//  Copyright (c) 2022 . All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreMotion


protocol MainListDisplayLogic: AnyObject {
	func presentList(viewModel: MainList.FetchDrives.ViewModel)
	func loadStats(viewModel: MainList.FetchStats.ViewModel)
}

class MainListViewController: UIViewController, MainListDisplayLogic, MainListLayoutViewLogic, MainTabBarViewButtonLogic, StatsLayoutViewLogic {

	var interactor: MainListBusinessLogic?
	var router: (NSObjectProtocol & MainListRoutingLogic & MainListDataPassing)?
	var layoutView: MainListLayoutView!
	var statsLayoutView: StatsLayoutView!
	var tabBarView: MainTabBarView!
	var selectedCell: MainListCell?
	var timer: Timer?
	lazy var altimeter = CMAltimeter()

	var selectedStatsType: MainList.StatsShowType = .lastYear

	// MARK: Object lifecycle

	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
		super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
		setup()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		setup()
	}

	// MARK: View lifecycle

	deinit {
    	NotificationCenter.default.removeObserver(self, name: .languageWasChanged, object: nil)
    	NotificationCenter.default.removeObserver(self, name: .fontSizeWasChanged, object: nil)
    	NotificationCenter.default.removeObserver(self, name: .settingsUpdated, object: nil)
	}

	override func viewDidLoad() {
		super.viewDidLoad()
    	NotificationCenter.default.addObserver(self, selector: #selector(languageWasChanged),
    		name: .languageWasChanged, object: nil)
		NotificationCenter.default.addObserver(self, selector: #selector(fontSizeWasChanged),
    		name: .fontSizeWasChanged, object: nil)
		NotificationCenter.default.addObserver(self, selector: #selector(dataDownloaderStateChange),
    		name: .dataDownloaderStateChange, object: nil)

		self.navigationController!.navigationBar.topItem?.leftBarButtonItem = UIBarButtonItem(image:
			UIImage(named: "settings_icon"), style: .plain, target: router, action:NSSelectorFromString("routeToSettings"))

		self.navigationController!.navigationBar.topItem?.rightBarButtonItem = UIBarButtonItem(image:
			UIImage(named: "map_icon"), style: .plain, target: router, action:NSSelectorFromString("routeToFullMap"))

		setUpView()

		self.getData()



		self.altimeter.startRelativeAltitudeUpdates(to: OperationQueue.main, withHandler: { (altitudeData:CMAltitudeData?, error:Error?) in

			if (error == nil) {

			}
		})


	}

	override func viewWillAppear(_ animated: Bool) {
		super.viewWillAppear(animated)

		self.navigationController!.navigationBar.setBackgroundImage(UIImage(), for: .default)
    	self.navigationController!.navigationBar.shadowImage = UIImage()
		self.navigationController!.navigationBar.isTranslucent = true
    	self.view.backgroundColor = .white
	}

	override func viewDidAppear(_ animated: Bool) {
		super.viewDidAppear(animated)
		layoutView.adjustVisibilityOfShadowLines()
		layoutView.dismissAnyActiveCell()

		statsLayoutView.adjustVisibilityOfShadowLines()
	}

	//MARK: Set up

	private func setup() {
//		self.title = "GPS Tracker"

		let viewController = self
		let interactor = MainListInteractor()
		let presenter = MainListPresenter()
		let router = MainListRouter()
		viewController.interactor = interactor
		viewController.router = router
		interactor.presenter = presenter
		presenter.viewController = viewController
		router.viewController = viewController
		router.dataStore = interactor
	}

	private func setUpView() {

		statsLayoutView = StatsLayoutView(frame: CGRect(x: 0, y: 0, width: self.view.frame.width, height: 100))
		self.view.addSubview(statsLayoutView)
		statsLayoutView.topAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.topAnchor).isActive = true
        statsLayoutView.leftAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.leftAnchor).isActive = true
        statsLayoutView.rightAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.rightAnchor).isActive = true
		statsLayoutView.controller = self

		layoutView = MainListLayoutView(frame: CGRect(x: 0, y: 0, width: self.view.frame.width, height: 100))
		self.view.addSubview(layoutView)
		layoutView.topAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.topAnchor).isActive = true
        layoutView.leftAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.leftAnchor).isActive = true
        layoutView.rightAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.rightAnchor).isActive = true
		layoutView.controller = self


		tabBarView = MainTabBarView(frame: CGRect(x: 0, y: 0, width: self.view.frame.width, height: 100))
		self.view.addSubview(tabBarView)
		tabBarView.topAnchor.constraint(equalTo: layoutView.bottomAnchor).isActive = true
		tabBarView.topAnchor.constraint(equalTo: statsLayoutView.bottomAnchor).isActive = true
		tabBarView.heightAnchor.constraint(equalToConstant: 49).isActive = true
        tabBarView.leftAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.leftAnchor).isActive = true
        tabBarView.rightAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.rightAnchor).isActive = true
        tabBarView.bottomAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.bottomAnchor).isActive = true
		tabBarView.controller = self

		tabBarView.updateTitles()

		statsLayoutView.alpha = 0
	}

	// MARK: Functions

	func getData() {
		let requestDrives = MainList.FetchDrives.Request()
		interactor?.fetchDrives(request: requestDrives)

		let requestStats = MainList.FetchStats.Request(statsShowType: self.selectedStatsType)
		interactor?.fetchStats(request: requestStats)
	}


	// MARK: MainListDisplayLogic

	func presentList(viewModel: MainList.FetchDrives.ViewModel) {
		DispatchQueue.main.asyncAfter(deadline: .now()) {
			self.layoutView.updateData(data: viewModel.displayedCellItems)
		}
	}
	
	func loadStats(viewModel: MainList.FetchStats.ViewModel) {
		DispatchQueue.main.asyncAfter(deadline: .now()) {
			self.statsLayoutView.updateData(data: viewModel.displayedCellItems, statsShowType: self.selectedStatsType)
		}
	}

	// MARK: MainListLayoutViewLogic

	func userPressedOnADriveWithIdentificator(_ identificator: String) {
		self.router?.routeToMapWithIdentificator(identificator)
	}

	func userPressedToDeleteADriveWithIdentificator(_ identificator: String) {
        let alert = UIAlertController(title: "hey_alert_title".localized(), message: "main_question_delete_this_drive".localized(), preferredStyle: .alert)
		alert.addAction(UIAlertAction(title: "delete_button_title".localized(), style: .destructive, handler: { action in
			self.interactor?.deleteADrive(request: MainList.DeleteADrive.Request.init(identificator: identificator))
		}))

		alert.addAction(UIAlertAction(title: "cancel_button_title".localized(), style: .cancel, handler: nil))
		
		self.present(alert, animated: true, completion: nil)
	}

	func userPressedToMarkADriveWithIdentificator(_ identificator: String, businessType: Bool) {
		self.interactor?.changeADriveType(request: MainList.ChangeADriveType.Request.init(identificator: identificator, isBusinessType: businessType))
	}

	func headerWasPressedWithSectionedMonthString(_ sectionedMonthString: String) {
		self.router?.routeToMapWithSectionedMonthString(sectionedMonthString)
	}

	// MARK: StatsLayoutViewLogic

	func segmentButtonIndexChanged(_ index: Int) {
		self.selectedStatsType = MainList.StatsShowType.init(rawValue: index)!
		
		let requestStats = MainList.FetchStats.Request(statsShowType: self.selectedStatsType)
		interactor?.fetchStats(request: requestStats)
	}

	// MARK: MainTabBarViewButtonLogic

	func userSelectedMainTab() {
		layoutView.alpha = 1
		statsLayoutView.alpha = 0
	}

	func userSelectedStatsTab() {
		layoutView.alpha = 0
		statsLayoutView.alpha = 1
	}

	// MARK: Notifications

	@objc private func languageWasChanged() {
		getData()
		tabBarView.updateTitles()
		layoutView.adjustNoDataLabelText()
	}

	@objc private func fontSizeWasChanged() {
		self.layoutView.resetUI()
	}

	@objc private func dataDownloaderStateChange() {
		let requestStats = MainList.FetchStats.Request(statsShowType: self.selectedStatsType)
		interactor?.fetchStats(request: requestStats)
	}
}
