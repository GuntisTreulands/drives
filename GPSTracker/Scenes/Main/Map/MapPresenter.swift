//
//  MapPresenter.swift
//  GPS Tracker
//
//  Created by Guntis on 2022.
//  Copyright (c) 2022 . All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData
import MapKit


protocol MapPresentationLogic {
	func presentData(response: Map.FetchPoints.Response)
}

class MapPresenter: MapPresentationLogic {
	weak var viewController: MapDisplayLogic?
	let dateFormatter = DateFormatter()
	let calendar = Calendar.current

	// MARK: MainListPresentationLogic

	func presentData(response: Map.FetchPoints.Response) {

		dateFormatter.dateFormat = "HH:mm"


		var finalArray = [Map.FetchPoints.ViewModel.DisplayedItem]()

		let seconds = Int((response.fetchedPoints.last!.timestamp - response.fetchedPoints.first!.timestamp))
		let minutes = Int(seconds / 60)

		let distance = response.fetchedPoints.first?.rDrive?.totalDistance


		let title = "\(HelperWorker.distanceFromMeters(distance ?? 0)) | \(HelperWorker.timeFromSeconds(seconds))"

		for point in response.fetchedPoints {
			let date = Date.init(timeIntervalSince1970: point.timestamp)

			var title = dateFormatter.string(from: date)
			var subtitle = dateFormatter.string(from: date)

			if response.fetchedPoints.first == point {
				title = "Start"
			} else if response.fetchedPoints.last == point {
				title = "End"
				subtitle = "\(subtitle) (\(minutes) minutes)"
			}

			finalArray.append(Map.FetchPoints.ViewModel.DisplayedItem.init(title: title, subtitle: subtitle, latitude: point.latitude, longitude: point.longitude, isStart: (response.fetchedPoints.first == point), isEnd: (response.fetchedPoints.last == point)))
		}

		let allMapPoints = createMapPoints(from: finalArray)
		
    	let viewModel = Map.FetchPoints.ViewModel(displayedItems: finalArray, mapPoints: allMapPoints, title: title)
    	viewController?.presentMap(viewModel: viewModel)
	}

	// MARK: Functions

	private func createMapPoints(from data: [Map.FetchPoints.ViewModel.DisplayedItem]) -> [MapPoint] {
		let mapPoints = data.map { MapPoint(title: $0.title, subtitle: $0.subtitle, isStart: $0.isStart, isEnd: $0.isEnd, coordinate: CLLocationCoordinate2D(latitude: $0.latitude, longitude: $0.longitude)) }

  		return mapPoints
  	}
}
