//
//  MapViewController.swift
//  GPS Tracker
//
//  Created by Guntis on 2022.
//  Copyright (c) 2022 . All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit



protocol MapDisplayLogic: AnyObject {
	func presentMap(viewModel: Map.FetchPoints.ViewModel)
}

class MapViewController: UIViewController, MapDisplayLogic, MapLayoutViewLogic {

	var interactor: MapBusinessLogic?
	var router: (NSObjectProtocol & MapRoutingLogic & MapDataPassing)?
	var layoutView: MapLayoutView!
	
	// MARK: Object lifecycle

	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
		super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
		setup()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		setup()
	}

	// MARK: View lifecycle

	deinit {
    	NotificationCenter.default.removeObserver(self, name: .languageWasChanged, object: nil)
    	NotificationCenter.default.removeObserver(self, name: .fontSizeWasChanged, object: nil)
    	NotificationCenter.default.removeObserver(self, name: .settingsUpdated, object: nil)
	}

	override func viewDidLoad() {
		super.viewDidLoad()
    	NotificationCenter.default.addObserver(self, selector: #selector(languageWasChanged),
    		name: .languageWasChanged, object: nil)
		NotificationCenter.default.addObserver(self, selector: #selector(fontSizeWasChanged),
    		name: .fontSizeWasChanged, object: nil)
		NotificationCenter.default.addObserver(self, selector: #selector(settingsUpdated),
    		name: .settingsUpdated, object: nil)

		setUpView()

		self.getData()
	}

	override func viewWillAppear(_ animated: Bool) {
		super.viewWillAppear(animated)

		self.navigationController!.navigationBar.setBackgroundImage(UIImage(), for: .default)
    	self.navigationController!.navigationBar.shadowImage = UIImage()
		self.navigationController!.navigationBar.isTranslucent = true
    	self.view.backgroundColor = .white

    	
//		self.navigationController?.navigationBar.prefersLargeTitles = true
	}

	override func viewDidAppear(_ animated: Bool) {
		super.viewDidAppear(animated)
//		layoutView.adjustVisibilityOfShadowLines()
	}

	//MARK: Set up

	private func setup() {
//		self.title = "GPS Tracker"

		let viewController = self
		let interactor = MapInteractor()
		let presenter = MapPresenter()
		let router = MapRouter()
		viewController.interactor = interactor
		viewController.router = router
		interactor.presenter = presenter
		presenter.viewController = viewController
		router.viewController = viewController
		router.dataStore = interactor
	}

	private func setUpView() {
		layoutView = MapLayoutView(frame: CGRect(x: 0, y: 0, width: self.view.frame.width, height: 100))
		self.view.addSubview(layoutView)
		layoutView.topAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.topAnchor).isActive = true
        layoutView.leftAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.leftAnchor).isActive = true
        layoutView.rightAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.rightAnchor).isActive = true
        layoutView.bottomAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.bottomAnchor).isActive = true
		layoutView.controller = self
	}

	// MARK: Functions

	func getData() {
		let request = Map.FetchPoints.Request()
		interactor?.fetchPoints(request: request)
	}


	// MARK: MapDisplayLogic

	func presentMap(viewModel: Map.FetchPoints.ViewModel) {

//		DispatchQueue.main.asyncAfter(deadline: .now()) {
//
		self.layoutView.updateData(data: viewModel.mapPoints)
		self.title = viewModel.title
//
//		}
	}


	// MARK: MapLayoutViewLogic

	// MARK: Notifications

	@objc private func languageWasChanged() {
		getData()
	}

	@objc private func fontSizeWasChanged() {
//		self.layoutView.resetUI()
	}

	@objc private func settingsUpdated() {
//		let request = FuelList.FetchPrices.Request(forcedReload: true)
//		interactor?.fetchPrices(request: request)
	}

}
