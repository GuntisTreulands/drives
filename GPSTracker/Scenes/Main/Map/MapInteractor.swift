//
//  MapInteractor.swift
//  GPS Tracker
//
//  Created by Guntis on 2022.
//  Copyright (c) 2022 . All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData

protocol MapBusinessLogic {
	func fetchPoints(request: Map.FetchPoints.Request)
}

protocol MapDataStore {
	var identificator: String { get set }
}

class MapInteractor: NSObject, MapBusinessLogic, MapDataStore, NSFetchedResultsControllerDelegate {
	
	var presenter: MapPresentationLogic?
	var fetchedResultsController: NSFetchedResultsController<DriveEntity>!

  	var identificator: String = ""

	// MARK: MainListBusinessLogic

	func fetchPoints(request: Map.FetchPoints.Request) {
		if fetchedResultsController == nil {
			let context = DataBaseManager.shared.mainManagedObjectContext()
			let fetchRequest: NSFetchRequest<DriveEntity> = DriveEntity.fetchRequest()
			let sortByMonth = NSSortDescriptor(key: "monthString", ascending: true)
			let sortByStartTime = NSSortDescriptor(key: "startTime", ascending: false)
			fetchRequest.sortDescriptors = [sortByMonth, sortByStartTime]
			fetchRequest.predicate = NSPredicate(format:"identificator == %@", identificator)
			fetchRequest.fetchLimit = 1
			
			fetchedResultsController = NSFetchedResultsController(fetchRequest: fetchRequest, managedObjectContext: context, sectionNameKeyPath: nil, cacheName: nil)

			fetchedResultsController.delegate = self
		}


		var drive: DriveEntity?

		do {
			try fetchedResultsController.performFetch()

			if let firstDrive = fetchedResultsController.fetchedObjects?.first {
				drive = firstDrive
			}

		} catch let error {
			// Something went wrong
			print("Something went wrong. \(error)")
		}


		let sortedPoints: [PointEntity] = drive?.rPoints?.sortedArray(using: [NSSortDescriptor(key: "timestamp", ascending: true)]) as! [PointEntity]
		
    	let response = Map.FetchPoints.Response(fetchedPoints: sortedPoints)
    	presenter?.presentData(response: response)

	}

	// MARK: NSFetchedResultsControllerDelegate
	
  	func controllerDidChangeContent(_ controller: NSFetchedResultsController<NSFetchRequestResult>) {
		fetchPoints(request: Map.FetchPoints.Request())
	}
}
